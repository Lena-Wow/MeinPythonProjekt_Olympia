import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt


# Titel
st.title("Olympische Spiele ‚Äì K√∂rperdatenanalyse")
st.markdown(
    "Lade eine CSV-Datei hoch, um Gewicht, Gr√∂√üe und BMI nach Sportart und Jahr zu analysieren."
)

#  eine Funktion von Streamlit, mit der man  eine Schaltfl√§che f√ºr den Datei-Upload einf√ºgt.
uploaded_file = st.file_uploader("üìÇ CSV-Datei hochladen", type=["csv"])

# Diese Zeile pr√ºft: "Wurde √ºberhaupt eine Datei hochgeladen?" Wenn nein, wird Block mit "else:  st.info("Bitte lade zuerst eine CSV-Datei hoch.")"ausgegeben"
if uploaded_file is not None:
    # Versucht, die Datei mit Pandas(pd) zu lesen und zu verarbeiten. sep=None + engine="python" erlaubt automatisches Erkennen des Trennzeichens (Komma, Semikolon etc.).
    # encoding="ISO-8859-1" ist f√ºr viele europ√§ische Zeichens√§tze geeignet (z.B. deutsche Umlaute).
    try:
        df = pd.read_csv(
            uploaded_file, sep=None, engine="python", encoding="ISO-8859-1"
        )
        df.columns = (
            df.columns.str.strip()
        )  # Spaltennamen s√§ubern, Entfernt Leerzeichen am Anfang und Ende der Spaltennamen (z.‚ÄØB. " Gewicht " ‚Üí "Gewicht").

        # Iteriert √ºber die drei numerischen Spalten: Gewicht, Groesse und BMI, wandel die in str um, ersetz KOmma durch punkt, und wandel die dann in float wieder
        for col in ["Gewicht in kg", "Groesse in cm", "BMI"]:
            df[col] = df[col].astype(str).str.replace(",", ".").astype(float)
        # pandas wandelt die Spalte Jahr in zahlen um. WEnn eintrag ung√ºltig ist, wird es zu "not a number".  "coerce" bedeutet "erzwingen.Bei fehlende eingaben kann man trotzdem arbeiten.
        df["Olympic_Jahr"] = pd.to_numeric(df["Olympic_Jahr"], errors="coerce")

        # Auswahlfelder
        metriken = ["Gewicht in kg", "Groesse in cm", "BMI"]
        ausgew√§hlte_metrik = st.selectbox(
            "W√§hle ein Parameter Gewicht, Groesse oder gerechnetes BMI Index:", metriken
        )
        sportarten = df[
            "Sportart"
        ].unique()  # Funktion gibt jede Sportart nur einmal zur√ºck, ohne Wiederholungen.
        ausgew√§hlte_sportart = st.selectbox("W√§hle eine Sportart:", sorted(sportarten))

        # Daten filtern, Filtert den DataFrame so, dass nur Eintr√§ge zur gew√§hlten Sportart enthalten sind. D.h. Es wird nur die Zeilen ausgegebne,
        # wo die Bedeutung, bei dem Vergleich  True ist und nur die Daten(Gewicht, Groesse und BMI nur von diesem Sportart ausgew√§hlt sind)
        df_sport = df[df["Sportart"] == ausgew√§hlte_sportart]

        # Diagramm
        st.subheader(
            f"{ausgew√§hlte_metrik} √ºber die Jahre im Sport‚Äì {ausgew√§hlte_sportart}"
        )
        fig, ax = (
            plt.subplots()
        )  # ein leeres Diagramm (Figure) und eine Zeichenfl√§che (Axes) wird  mit matplotlib erstellt. FIG ist Diagramm, AX ist Koordinatensystem
        ax.plot(
            df_sport["Olympic_Jahr"], df_sport[ausgew√§hlte_metrik], marker="o"
        )  # x: Olympic_jahr,y: ausgew√§hler Parameter/Metrik, marker: Datenknickpunkt, kann was anderes sein
        ax.set_xlabel("Jahr")  # Beschriftung zu achse x
        ax.set_ylabel(ausgew√§hlte_metrik)  ## Beschriftung zu achse y
        ax.set_title(f"{ausgew√§hlte_metrik} im Zeitverlauf")  # Title √ºber Diagramm
        ax.grid(True)  # gitternetz wird aktiviert
        st.pyplot(fig)  # wird geprintet

    except Exception as e:
        st.error(f"Fehler beim Verarbeiten der Datei: {e}")
else:
    st.info("Bitte lade zuerst eine CSV-Datei hoch.")
